---
export interface Props {
  prevLesson?: { href: string; title: string } | null;
  nextLesson?: { href: string; title: string } | null;
  // Added props to handle completion logic
  hasQuiz?: boolean;
  chapterSlug?: string;
  lessonSlug?: string;
}

const { prevLesson, nextLesson, hasQuiz, chapterSlug, lessonSlug } =
  Astro.props;
---

<footer class="lesson-footer">
  <nav class="lesson-nav" aria-label="Lesson">
    {
      prevLesson ? (
        <a href={prevLesson.href} class="prev-link" rel="prev">
          <svg
            class="nav-icon"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
          >
            <path
              d="M15 18l-6-6 6-6"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
          <span>Previous</span>
          <strong>{prevLesson.title}</strong>
        </a>
      ) : (
        <span class="empty-link" />
      )
    }
    {
      nextLesson ? (
        <a
          href={nextLesson.href}
          class="next-link"
          id="next-lesson-btn"
          rel="next"
          data-has-quiz={hasQuiz?.toString() ?? "false"}
          data-chapter-slug={chapterSlug ?? ""}
          data-lesson-slug={lessonSlug ?? ""}
        >
          <span>Next</span>
          <strong>{nextLesson.title}</strong>
          <svg
            class="nav-icon"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
          >
            <path
              d="M9 18l6-6-6-6"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
        </a>
      ) : (
        <span class="empty-link" />
      )
    }
  </nav>
</footer>

<script>
  import { courseProgressManager } from "@utils/courseProgress";

  function setupNextButtonListener() {
    const nextBtn = document.getElementById("next-lesson-btn");
    if (!nextBtn) return;

    // Clone to remove old listeners from Astro's view transitions
    const newBtn = nextBtn.cloneNode(true) as HTMLAnchorElement;
    nextBtn.parentNode?.replaceChild(newBtn, nextBtn);

    newBtn.addEventListener("click", (e) => {
      e.preventDefault();
      console.log("[Footer] Next button clicked.");

      const hasQuiz = newBtn.dataset.hasQuiz === "true";
      const chapterSlug = newBtn.dataset.chapterSlug;
      const lessonSlug = newBtn.dataset.lessonSlug;
      const href = newBtn.href;

      if (!chapterSlug || !lessonSlug) {
        console.error("[Footer] Missing slugs, navigating anyway.");
        window.location.href = href;
        return;
      }

      if (hasQuiz) {
        // Access the global variable set by [...slug].astro
        const percentage = (window as any).latestQuizPercentage;
        console.log(`[Footer] Quiz lesson. Score: ${percentage}`);

        if (percentage !== null && percentage >= 70) {
          console.log("[Footer] Marking COMPLETE.");
          courseProgressManager.markLessonCompleted(chapterSlug, lessonSlug);
        } else {
          // Mark as skipped if score is < 70 or quiz was never taken (percentage is null)
          console.log("[Footer] Marking SKIPPED.");
          courseProgressManager.markLessonSkipped(chapterSlug, lessonSlug);
        }
      } else {
        console.log("[Footer] Non-quiz lesson. Marking COMPLETE.");
        // Lesson without quiz, mark complete
        courseProgressManager.markLessonCompleted(chapterSlug, lessonSlug);
      }

      // Dispatch event so sidebar can update
      window.dispatchEvent(new CustomEvent("lesson-progress-updated"));

      // Give time for storage to save
      setTimeout(() => {
        window.location.href = href;
      }, 100);
    });
  }

  document.addEventListener("DOMContentLoaded", setupNextButtonListener);
  document.addEventListener("astro:page-load", setupNextButtonListener);
</script>

<style is:global>
  .lesson-nav {
    display: grid;
    grid-template-columns: 1fr 1fr;
    max-width: 1400px;
    margin: 0 auto;
    gap: var(--space-3xs);
  }
  .prev-link,
  .next-link,
  .empty-link {
    display: flex;
    flex-direction: column;
    padding: var(--space-xs) var(--space-s);
    border: 1px solid transparent;
    transition: all 0.2s ease;
  }

  .prev-link,
  .next-link {
    text-decoration: none;
  }
  .prev-link:hover,
  .next-link:hover {
    background: var(--pink-10);
    color: var(--pink-1);
    border-color: var(--pink-1);
  }
  .prev-link {
    text-align: left;
    align-items: flex-start;
  }
  .next-link {
    text-align: right;
    align-items: flex-end;
  }
  .prev-link span,
  .next-link span {
    font-size: 0.9rem;
    opacity: 0.7;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  .prev-link strong,
  .next-link strong {
    font-size: 1.1rem;
    font-weight: 500;
  }
  .prev-link:hover strong,
  .next-link:hover strong {
    color: var(--primary);
  }

  .nav-icon {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
  }
  @media (max-width: 640px) {
    .lesson-nav {
      grid-template-columns: 1fr;
    }
    .next-link {
      border-top: 1px dashed var(--border);
    }
  }
</style>
