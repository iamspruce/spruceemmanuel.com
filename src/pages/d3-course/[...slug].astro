---
import { getCollection } from "astro:content";
import D3JSLayout from "../../layouts/D3jsLayout.astro";
import TableOfContents from "../../components/TableOfContents.astro";
import { getLessonNavigation } from "../../utils/courseUtils";

export async function getStaticPaths() {
  const lessons = await getCollection("d3-course");
  return lessons.map((lesson) => ({
    params: { slug: lesson.slug },
    props: { lesson },
  }));
}

const { lesson } = Astro.props;
const { Content, headings } = await lesson.render();
const navigation = await getLessonNavigation(lesson.slug);

// --- MODIFICATION ---
// Use the 'hasQuiz' flag from the lesson's frontmatter [cite: 2]
const hasQuiz = lesson.data.hasQuiz ?? false;
// --- END MODIFICATION ---

const layoutProps = {
  title: lesson.data.title,
  description: lesson.data.description,
  chapterSlug: lesson.data.chapter,
  lessonSlug: lesson.slug,
  prevLesson: navigation.prev,
  nextLesson: navigation.next,
};
---

<D3JSLayout {...layoutProps}>
  <div
    class="lesson-layout"
    data-lesson-slug={lesson.slug}
    data-chapter-slug={lesson.data.chapter}
    data-has-quiz={hasQuiz.toString()}
  >
    <article class="lesson-content">
      <header class="lesson-header">
        <h1>{lesson.data.title}</h1>
        <p class="lesson-description">{lesson.data.description}</p>
      </header>

      <Content />

      {/* Auto-completion section for lessons without quiz */}
      {
        !hasQuiz && navigation.next && (
          <div class="lesson-completion" id="lesson-completion">
            <div class="completion-message">
              <h3>Ready to continue?</h3>
              <p>
                Click below to mark this lesson as complete and move to the next
                one.
              </p>
            </div>
            <a
              href={navigation.next.href}
              class="complete-btn"
              id="mark-complete-btn"
            >
              Mark Complete & Continue
            </a>
          </div>
        )
      }
    </article>
    <aside class="lesson-sidebar">
      <TableOfContents headings={headings} />
    </aside>
  </div>
</D3JSLayout>

<script>
  import { courseProgressManager } from "../../utils/courseProgress";

  function initializeLessonProgress() {
    console.log("[Lesson Progress] Initializing...");

    const lessonLayout = document.querySelector(".lesson-layout");
    if (!lessonLayout) {
      console.error("[Lesson Progress] Lesson layout not found.");
      return;
    }

    const lessonSlug = lessonLayout.getAttribute("data-lesson-slug");
    const chapterSlug = lessonLayout.getAttribute("data-chapter-slug");
    const hasQuiz = lessonLayout.getAttribute("data-has-quiz") === "true";

    console.log(`[Lesson Progress] Initializing lesson:
      - Chapter: ${chapterSlug}
      - Lesson: ${lessonSlug}
      - Has Quiz: ${hasQuiz}`);

    if (!lessonSlug || !chapterSlug) {
      console.error("[Lesson Progress] Missing slug or chapter. Aborting.");
      return;
    }

    // Handle manual completion for lessons without quiz
    const completeBtn = document.getElementById("mark-complete-btn");
    if (completeBtn) {
      console.log("[Lesson Progress] 'Mark Complete' button found.");

      // Remove any existing listeners
      const newBtn = completeBtn.cloneNode(true) as HTMLElement;
      completeBtn.parentNode?.replaceChild(newBtn, completeBtn);

      newBtn.addEventListener("click", (e) => {
        e.preventDefault();
        console.log("[Lesson Progress] 'Mark Complete' button clicked.");
        courseProgressManager.markLessonCompleted(chapterSlug, lessonSlug);

        setTimeout(() => {
          window.location.href = newBtn.getAttribute("href") || "/";
        }, 100);
      });
    }

    // Auto-mark complete on scroll (for lessons without quiz)
    if (!hasQuiz) {
      console.log("[Lesson Progress] Setting up auto-completion on scroll.");
      let hasReachedBottom = false;

      const checkScrollPosition = () => {
        if (hasReachedBottom) return;
        const scrollPosition = window.innerHeight + window.scrollY;
        const documentHeight = document.documentElement.scrollHeight;

        if (scrollPosition >= documentHeight - 100) {
          hasReachedBottom = true;
          console.log(
            "[Lesson Progress] Scrolled to bottom. Marking complete."
          );
          courseProgressManager.markLessonCompleted(chapterSlug, lessonSlug);
          window.dispatchEvent(new CustomEvent("lesson-progress-updated"));
        }
      };

      window.addEventListener("scroll", checkScrollPosition);
      setTimeout(checkScrollPosition, 1000);
    }

    // Listen for quiz completion
    const quizListener = ((e: CustomEvent) => {
      console.log(
        "[Lesson Progress] 'quiz-completed' event received!",
        e.detail
      );
      const { passed, percentage } = e.detail;

      if (passed) {
        console.log(
          `[Lesson Progress] Quiz PASSED (>= 70%). Marking lesson complete.`
        );
        courseProgressManager.markLessonCompleted(chapterSlug, lessonSlug);

        const completionEl = document.getElementById("lesson-completion");
        if (completionEl) {
          console.log("[Lesson Progress] Displaying completion message.");
          completionEl.innerHTML = `
            <div class="completion-success">
              <h3>ðŸŽ‰ Lesson Completed!</h3>
              <p>You've passed the quiz with ${percentage.toFixed(0)}%</p>
            </div>
          `;
        }
        window.dispatchEvent(new CustomEvent("lesson-progress-updated"));
      } else if (percentage < 50) {
        console.log(
          `[Lesson Progress] Quiz FAILED (< 50%). Marking lesson skipped.`
        );
        courseProgressManager.markLessonSkipped(chapterSlug, lessonSlug);
        window.dispatchEvent(new CustomEvent("lesson-progress-updated"));
      } else {
        console.log(
          `[Lesson Progress] Quiz score (${percentage}%) is between 50-69%.`
        );
      }
    }) as EventListener;

    // Only add quiz listeners if the page has a quiz
    if (hasQuiz) {
      console.log("[Lesson Progress] Attaching 'quiz-completed' listener.");
      window.addEventListener("quiz-completed", quizListener);
    }

    // Handle user navigating away from a quiz lesson
    const beforeSwapListener = () => {
      console.log("[Lesson Progress] Navigation detected.");
      if (hasQuiz) {
        const progress = courseProgressManager.getAllProgress();
        const lessonProgress =
          progress?.chapters[chapterSlug]?.lessons[lessonSlug];

        if (!lessonProgress?.completed) {
          console.log(
            "[Lesson Progress] Lesson not complete. Marking as SKIPPED."
          );
          courseProgressManager.markLessonSkipped(chapterSlug, lessonSlug);
        }
      }

      // Clean up listeners
      window.removeEventListener("quiz-completed", quizListener);
      document.removeEventListener("astro:before-swap", beforeSwapListener);
    };

    console.log("[Lesson Progress] Attaching navigation listener.");
    document.addEventListener("astro:before-swap", beforeSwapListener);
  }

  // Run on initial page load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeLessonProgress);
  } else {
    initializeLessonProgress();
  }

  // Run on Astro page transitions
  document.addEventListener("astro:page-load", initializeLessonProgress);
</script>

<style>
  .lesson-layout {
    max-width: 1400px;
    margin: 0 auto;
  }

  @media (min-width: 1024px) {
    .lesson-layout {
      display: grid;
      grid-template-columns: 1fr 800px 1fr;
      gap: var(--space-xs, 1.5rem);
    }

    .lesson-content {
      grid-column: 2;
      max-width: none;
      margin: 0;
    }

    .lesson-sidebar {
      grid-column: 3;
      width: 250px;
    }
  }

  @media (max-width: 1024px) {
    .lesson-sidebar {
      display: none;
    }
  }

  .lesson-sidebar {
    position: relative;
    margin-block-start: var(--space-3xl);
  }

  .lesson-content {
    padding-block: var(--space-3xs);
    padding-inline: var(--space-3xs);
    max-width: 800px;
    margin: 0 auto;
  }

  .lesson-header {
    text-align: center;
    margin-block-end: var(--space-xl);
  }

  .lesson-header h1 {
    font-size: 2.5rem;
  }

  .lesson-description {
    font-size: 1.125rem;
    opacity: 0.8;
    line-height: 1.6;
  }

  .lesson-content :global(h1),
  .lesson-content :global(h2),
  .lesson-content :global(h3),
  .lesson-content :global(h4),
  .lesson-content :global(h5),
  .lesson-content :global(h6) {
    margin-block: var(--space-3xs);
  }

  .lesson-content :global(h1) {
    font-size: calc(var(--step-1) * 0.8);
  }

  .lesson-content :global(h2) {
    font-size: calc(var(--step-1) * 0.7);
  }
  .lesson-content :global(h3) {
    font-size: calc(var(--step-1) * 0.6);
  }

  .lesson-content :global(h4) {
    font-size: calc(var(--step-1) * 0.5);
  }

  .lesson-content :global(p) {
    font-size: 1.125rem;
    margin-block-end: var(--space-m);
  }

  .lesson-content :global(pre) {
    background: var(--code-bg);
    padding: 1.5rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .lesson-content :global(pre code) {
    background: none;
    padding: 0;
  }

  .lesson-completion {
    margin-top: 4rem;
    padding: 2rem;
    border: 2px solid var(--border);
    border-radius: 8px;
    background: var(--surface);
    text-align: center;
  }

  .completion-message p {
    margin-bottom: 0.5rem;
  }

  .completion-message h3 {
    margin-bottom: 1rem;
  }

  .quiz-requirement {
    font-size: 0.875rem;
    opacity: 0.7;
    margin-bottom: 1rem;
  }

  .complete-btn {
    display: inline-block;
    padding: 1rem 2rem;
    background: var(--primary);
    color: white;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .complete-btn:hover {
    opacity: 0.9;
    transform: translateY(-2px);
  }

  .completion-success {
    padding: 1rem;
  }

  .completion-success h3 {
    color: #22c55e;
    margin-bottom: 0.5rem;
  }

  @media print {
    .lesson-sidebar,
    .lesson-completion {
      display: none;
    }
  }
</style>
