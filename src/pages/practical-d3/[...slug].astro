---
import { getCollection } from "astro:content";
import D3JSLayout from "@layouts/D3jsLayout.astro";
import TableOfContents from "@components/TableOfContents.astro";
import { getLessonNavigation } from "@utils/courseUtils";

export async function getStaticPaths() {
  const lessons = await getCollection("practical-d3");
  return lessons.map((lesson) => ({
    params: { slug: lesson.slug },
    props: { lesson },
  }));
}

const { lesson } = Astro.props;
const { Content, headings } = await lesson.render();
const navigation = await getLessonNavigation(lesson.slug);

const hasQuiz = lesson.data.hasQuiz ?? false;

const layoutProps = {
  title: lesson.data.title,
  description: lesson.data.description,
  chapterSlug: lesson.data.chapter,
  lessonSlug: lesson.slug,
  prevLesson: navigation.prev,
  nextLesson: navigation.next,
  hasQuiz: hasQuiz, // Pass hasQuiz to the layout
};

// Format dates for display
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(date);
};
---

<D3JSLayout {...layoutProps}>
  <div
    class="lesson-layout"
    data-lesson-slug={lesson.slug}
    data-chapter-slug={lesson.data.chapter}
    data-has-quiz={hasQuiz.toString()}
  >
    <article
      class="lesson-content"
      itemscope
      itemtype="https://schema.org/LearningResource"
    >
      <header class="lesson-header">
        <h1 itemprop="name">{lesson.data.title}</h1>
        <p class="lesson-description" itemprop="description">
          {lesson.data.description}
        </p>

        <div class="lesson-meta">
          <time
            datetime={lesson.data.pubDate.toISOString()}
            itemprop="datePublished"
            class="lesson-date"
          >
            <span class="date-label">Published:</span>
            {formatDate(lesson.data.pubDate)}
          </time>
        </div>
      </header>

      <main class="lesson-main" itemprop="text">
        <Content />
      </main>

      <!-- This div will show quiz results -->
      <div id="lesson-completion-status" class="lesson-completion"></div>

      {
        lesson.data.updatedDate && (
          <time
            datetime={lesson.data.updatedDate.toISOString()}
            itemprop="dateModified"
            style="display: flex; align-items: center; flex-direction: column; gap: 0.5rem; margin-top: 2rem; font-size: 0.9rem; opacity: 0.7; text-align: center;"
          >
            <span class="date-label">last Updated On</span>
            <strong>{formatDate(lesson.data.updatedDate)}</strong>
          </time>
        )
      }
    </article>

    <aside class="lesson-sidebar" aria-label="Table of contents">
      <TableOfContents headings={headings} />
    </aside>
  </div>
</D3JSLayout>

<script>
  import { courseProgressManager } from "../../utils/courseProgress";

  // Store quiz score globally for the footer script
  (window as any).latestQuizPercentage = null;

  function initializeLessonProgress() {
    console.log("[Lesson Progress] Initializing...");
    (window as any).latestQuizPercentage = null; // Reset on each load

    const lessonLayout = document.querySelector(".lesson-layout");
    if (!lessonLayout) {
      console.error("[Lesson Progress] Lesson layout not found.");
      return;
    }

    const lessonSlug = lessonLayout.getAttribute("data-lesson-slug");
    const chapterSlug = lessonLayout.getAttribute("data-chapter-slug");
    const hasQuiz = lessonLayout.getAttribute("data-has-quiz") === "true";

    if (!lessonSlug || !chapterSlug) {
      console.error("[Lesson Progress] Missing slug or chapter. Aborting.");
      return;
    }

    // Listen for quiz completion to store score and show message
    const quizListener = ((e: CustomEvent) => {
      console.log(
        "[Lesson Progress] 'quiz-completed' event received!",
        e.detail
      );
      const { passed, percentage } = e.detail;

      // Store percentage for the "Next" button script
      (window as any).latestQuizPercentage = percentage;

      // Show a status message to the user
      const completionEl = document.getElementById("lesson-completion-status");
      if (completionEl) {
        if (passed) {
          completionEl.innerHTML = `
            <div class="completion-success">
              <h2>ðŸŽ‰ Quiz Passed!</h2>
              <p>You scored ${percentage.toFixed(
                0
              )}%. Click "Next" to continue.</p>
            </div>
          `;
        } else {
          completionEl.innerHTML = `
            <div class="completion-failed">
              <h2>ðŸ¤” Try Again?</h2>
              <p>You scored ${percentage.toFixed(
                0
              )}%. You need 70% to pass. You can retry the quiz, or click "Next" to skip this lesson.</p>
            </div>
          `;
        }
      }
      // We no longer mark as complete here. The footer button does.
      // We just dispatch an event so other components (like sidebar) can update.
      window.dispatchEvent(new CustomEvent("lesson-progress-updated"));
    }) as EventListener;

    if (hasQuiz) {
      console.log("[Lesson Progress] Attaching 'quiz-completed' listener.");
      window.addEventListener("quiz-completed", quizListener);
    }

    // Handle user navigating away (e.g., via sidebar)
    const beforeSwapListener = () => {
      console.log("[Lesson Progress] Navigation detected.");
      if (hasQuiz) {
        const progress = courseProgressManager.getAllProgress();
        const lessonProgress =
          progress?.chapters[chapterSlug]?.lessons[lessonSlug];

        if (!lessonProgress?.completed) {
          console.log(
            "[Lesson Progress] Lesson not complete. Marking as SKIPPED."
          );
          // Only mark as skipped if it's not already completed
          courseProgressManager.markLessonSkipped(chapterSlug, lessonSlug);
        }
      }

      // Clean up listeners
      window.removeEventListener("quiz-completed", quizListener);
      document.removeEventListener("astro:before-swap", beforeSwapListener);
    };

    console.log("[Lesson Progress] Attaching navigation listener.");
    document.addEventListener("astro:before-swap", beforeSwapListener);
  }

  // Run on initial page load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeLessonProgress);
  } else {
    initializeLessonProgress();
  }

  // Run on Astro page transitions
  document.addEventListener("astro:page-load", initializeLessonProgress);
</script>

<style>
  .lesson-layout {
    max-width: 1400px;
    margin: 0 auto;
  }

  @media (min-width: 1024px) {
    .lesson-layout {
      display: grid;
      grid-template-columns: 1fr 800px 1fr;
      gap: var(--space-xs, 1.5rem);
    }

    .lesson-content {
      grid-column: 2;
      max-width: none;
      margin: 0;
    }

    .lesson-sidebar {
      grid-column: 3;
      width: 250px;
    }
  }

  @media (max-width: 1024px) {
    .lesson-sidebar {
      display: none;
    }
  }

  .lesson-sidebar {
    position: relative;
    margin-block-start: var(--space-3xl);
  }

  .lesson-content {
    padding-block-start: var(--space-l);
    padding-block-end: var(--space-2xs);
    padding-inline: var(--space-xs);
    max-width: 800px;
    margin: 0 auto;
  }

  .lesson-header {
    text-align: center;
    margin-block-end: var(--space-xl);
  }

  .lesson-header h1 {
    font-size: 2.5rem;
    margin-bottom: var(--space-s, 1rem);
  }

  .lesson-description {
    font-size: 1.125rem;
    opacity: 0.8;
    line-height: 1.6;
    margin-bottom: var(--space-m, 1.5rem);
  }

  .lesson-meta {
    display: flex;
    justify-content: center;
    gap: var(--space-m, 1.5rem);
    flex-wrap: wrap;
    margin-top: var(--space-s, 1rem);
    font-size: 0.9rem;
    opacity: 0.7;
  }

  .lesson-date {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .date-label {
    font-weight: 600;
  }

  .lesson-main {
    margin-block: var(--space-l, 2rem);
  }

  .lesson-content :global(h1),
  .lesson-content :global(h2),
  .lesson-content :global(h3),
  .lesson-content :global(h4),
  .lesson-content :global(h5),
  .lesson-content :global(h6) {
    margin-block: var(--space-3xs);
  }

  .lesson-content :global(h1) {
    font-size: calc(var(--step-1) * 0.8);
  }

  .lesson-content :global(h2) {
    font-size: calc(var(--step-1) * 0.7);
  }

  .lesson-content :global(h3) {
    font-size: calc(var(--step-1) * 0.6);
  }

  .lesson-content :global(h4) {
    font-size: calc(var(--step-1) * 0.5);
  }

  .lesson-content :global(p) {
    font-size: 1.125rem;
    margin-block-end: var(--space-m);
  }

  .lesson-content :global(pre) {
    background: var(--code-bg);
    padding: 1.5rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .lesson-content :global(pre code) {
    background: none;
    padding: 0;
  }

  /* Styles for the new completion status div */
  .lesson-completion {
    margin-top: 4rem;
    padding: 2rem;
    border: 2px solid var(--border);
    border-radius: 8px;
    background: var(--surface);
    text-align: center;
    /* Hide if empty */
    &:empty {
      display: none;
    }
  }

  .completion-success {
    padding: 1rem;
  }

  .completion-success h2 {
    color: var(--green-11);
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
  }

  .completion-failed {
    padding: 1rem;
  }

  .completion-failed h2 {
    color: var(--amber-11);
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
  }

  @media print {
    body {
      background: white;
      color: black;
    }
    .lesson-sidebar,
    .lesson-completion {
      display: none;
    }
  }
</style>
